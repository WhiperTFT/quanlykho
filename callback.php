<?php
// /quanlykho/callback.php
require __DIR__ . '/vendor/autoload.php';

function write_json_atomic(string $path, array $data): void {
  $dir = dirname($path);
  if (!is_dir($dir)) {
    if (!@mkdir($dir, 0755, true) && !is_dir($dir)) {
      exit("‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c: " . htmlspecialchars($dir));
    }
  }
  $tmp = $path . '.tmp';
  $json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
  if ($json === false) exit("‚ùå Kh√¥ng th·ªÉ encode JSON.");
  if (@file_put_contents($tmp, $json, LOCK_EX) === false) exit("‚ùå Kh√¥ng th·ªÉ ghi file t·∫°m.");
  if (!@rename($tmp, $path)) {
    if (!@copy($tmp, $path)) { @unlink($tmp); exit("‚ùå Kh√¥ng th·ªÉ thay th·∫ø token.json."); }
    @unlink($tmp);
  }
}

$client = new Google_Client();
$client->setApplicationName("Gmail OAuth App");
$client->setScopes('https://www.googleapis.com/auth/gmail.send'); // ch·ªâ g·ª≠i mail
$client->setAuthConfig(__DIR__ . '/config/client_secret.json');
$client->setAccessType('offline');
$client->setIncludeGrantedScopes(true);
$client->setPrompt('consent select_account');

// Kh·ªõp tuy·ªát ƒë·ªëi v·ªõi URI ƒë√£ ƒëƒÉng k√Ω
if (strpos($_SERVER['HTTP_HOST'] ?? '', 'localhost') !== false) {
  $client->setRedirectUri('http://localhost/quanlykho/callback.php');
} else {
  $client->setRedirectUri('https://quanlykho.ddns.net/quanlykho/callback.php');
}

if (!isset($_GET['code'])) {
  exit('‚ùå L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ ·ªßy quy·ªÅn (code).');
}

$token = $client->fetchAccessTokenWithAuthCode($_GET['code']);
if (isset($token['error'])) {
  echo "‚ùå L·ªói khi l·∫•y token: " . htmlspecialchars($token['error_description'] ?? $token['error']);
  exit;
}

// L∆∞u token (ghi ƒë√® n·∫øu c√≥)
$tokenPath = __DIR__ . '/config/token.json';
write_json_atomic($tokenPath, $token);

if (empty($token['refresh_token'])) {
  echo "‚úÖ ƒê√£ l∆∞u access token <em>nh∆∞ng thi·∫øu</em> <code>refresh_token</code>.<br>"
     . "üëâ H√£y x√≥a <code>config/token.json</code> v√† ·ªßy quy·ªÅn l·∫°i (gi·ªØ <code>prompt=consent select_account</code>, ch·ªçn t√†i kho·∫£n kh√°c n·∫øu c·∫ßn).";
} else {
  echo "‚úÖ ·ª¶y quy·ªÅn th√†nh c√¥ng! ƒê√£ l∆∞u token (k√®m <code>refresh_token</code>) v√†o <code>config/token.json</code>.";
}
